package variables

import "fmt"

// StepEleven
/*
Напишите программу, которая последовательно делает следующие операции с введённым числом:

Число умножается на 2;
Затем к числу прибавляется 100.

После этого должен быть вывод получившегося числа на экран.
*/
func StepEleven() {
	var a int
	fmt.Scan(&a)
	// здесь ваш код
	res := (a * 2) + 100
	fmt.Println(res)
}

// StepTwelve
/*
Петя торопился в школу и неправильно написал программу,
которая сначала находит квадраты двух чисел, а затем их суммирует.
Исправьте его программу.
*/
func StepTwelve() {
	var a, b int
	fmt.Scan(&a) // считаем переменную 'a' с консоли
	fmt.Scan(&b) // считаем переменную 'b' с консоли

	a = a * a
	b = b * b
	c := a + b
	fmt.Println(c)
}

// StepThirteen
/*
По данному целому числу, найдите его квадрат.

Формат входных данных
На вход дается одно целое число.

Формат выходных данных
Программа должна вывести квадрат данного числа.
*/
func StepThirteen() {
	var a int
	fmt.Scan(&a)

	var res = a * a
	fmt.Println(res)
}

// StepFourteen
/*
Дано натуральное число, выведите его последнюю цифру.

Формат входных данных
На вход дается натуральное число N, не превосходящее 10000.

Формат выходных данных
Выведите одно целое число - ответ на задачу.
*/
func StepFourteen() {
	var number int
	fmt.Scan(&number)

	var result int = number % 10
	fmt.Println(result)
}

// StepFifteen
/*
Дано неотрицательное целое число. Найдите число десятков (то есть вторую цифру справа).

Формат входных данных
На вход дается натуральное число, не превосходящее 10000.

Формат выходных данных
Выведите одно целое число - число десятков.
*/
func StepFifteen() {
	var number uint
	fmt.Scan(&number)
	number /= 10

	var result uint = number % 10
	fmt.Println(result)
}

// StepSixteen
/*
Часовая стрелка повернулась с начала суток на d градусов. Определите, сколько сейчас целых часов h и целых минут m.

Входные данные
На вход программе подается целое число d (0 < d < 360).

Выходные данные
Выведите на экран фразу:
It is ... hours ... minutes.

Вместо многоточий программа должна выводить значения h и m, отделяя их от слов ровно одним пробелом.
*/
func StepSixteen() {
	var degree int

	for degree <= 0 || degree >= 360 {
		fmt.Scan(&degree)
	}

	/*
	 360 градусов -> 12 часов -> 1 полный оборот часовой стрелки
	 360 / 12 = 30 градусов за каждый час
	 30 / 4 = 7.5 градусов за каждое минутное деление
	*/

	hours := degree / 30
	minutes := 2 * (degree % 30)

	fmt.Printf("It is %d hours %d minutes.", hours, minutes)
}

package arrays

import (
	"fmt"
	"math"
)

// StepFive
/*
Внутри функции main (объявлять функцию не нужно) необходимо написать программу:

На первом этапе на стандартный ввод подается 10 целых положительных чисел,
которые должны быть записаны в порядке ввода в массив из 10 элементов.

Тип чисел, входящих в массив, должен соответствовать минимально возможному целому беззнаковому числу.
Имя массива который вы должны сами создать workArray (условие обязательное).
Для чтения из стандартного ввода уже импортирован пакет fmt.

На втором этапе на стандартный ввод подаются еще 3 пары чисел - индексы элементов этого массива,
которые требуется поменять местами (если такая пара чисел 3 и 7,
значит в массиве элемент с 3 индексом нужно поменять местами с элементом, индекс которого 7).

Элементы полученного массива должны быть выведены через пробел на стандартный вывод.
Далее автоматически будет проведена проверка используемых типов, результат которой будет добавлен к вашему ответу.
*/
func StepFive() {
	var workArray [10]uint8

	for i := 0; i < len(workArray); i++ {
		fmt.Scan(&workArray[i])
	}

	for i := 0; i < 3; i++ {
		var j, k int
		fmt.Scan(&j, &k)

		if j >= 0 && j < 10 && k >= 0 && k < 10 {
			first := workArray[j]
			second := workArray[k]

			workArray[j] = second
			workArray[k] = first
		}
	}

	for _, value := range workArray {
		fmt.Printf("%d ", value)
	}
}

// StepThirteen
/*
Напишите программу, принимающая на вход число N (N >= 4), а затем N целых чисел-элементов среза.
На вывод нужно подать 4-ый (3 по индексу) элемент данного среза.
*/
func StepThirteen() {
	var n int

	for n < 4 {
		//fmt.Println("Введите длинну среза: ")
		fmt.Scan(&n)
	}

	var slice = make([]int, n)
	//fmt.Println("Введите элементы среза: ")

	for i := 0; i < n; i++ {
		fmt.Scan(&slice[i])
	}

	//fmt.Println(slice)
	fmt.Println(slice[3])
}

// StepFourteen
/*
На ввод подаются пять целых чисел, которые записываются в массив.
Однако эта часть программы уже написана.
Вам нужно написать фрагмент кода, с помощью которого можно найти и вывести максимальное число в этом массиве.
*/
func StepFourteen() {
	array := [5]int{}
	var a int
	for i := 0; i < 5; i++ {
		fmt.Scan(&a)
		array[i] = a
	}

	// здесь ваш код
	max := math.MinInt

	for _, value := range array {
		if value > max {
			max = value
		}
	}

	fmt.Println(max)
}

// StepFifteen
/*
Дан массив, состоящий из целых чисел. Нумерация элементов начинается с 0.
Напишите программу, которая выведет элементы массива, индексы которых четны (0, 2, 4...).

Входные данные
Сначала задано число N — количество элементов в массиве (1 <= N <= 100).
Далее через пробел записаны N чисел — элементы массива. Массив состоит из целых чисел.

Выходные данные
Необходимо вывести все элементы массива с чётными индексами.
*/
func StepFifteen() {
	var n int

	for n < 1 || n > 100 {
		fmt.Scan(&n)
	}

	var slice = make([]int, n)

	for i := 0; i < n; i++ {
		fmt.Scan(&slice[i])
	}

	for index, value := range slice {
		if index%2 == 0 {
			fmt.Print(value, " ")
		}
	}
}

// StepSixteen
/*
Дана последовательность, состоящая из целых чисел. Напишите программу, которая подсчитывает
количество положительных чисел среди элементов последовательности.

Входные данные
Сначала задано число N — количество элементов в последовательности (1 <= N <= 100).
Далее через пробел записаны N чисел — элементы последовательности. Последовательность состоит из целых чисел.

Выходные данные
Необходимо вывести единственное число - количество положительных элементов в последовательности.
*/
func StepSixteen() {
	var (
		n,
		counter,
		number int
	)

	for n < 1 || n > 100 {
		fmt.Scan(&n)
	}

	for i := 0; i < n; i++ {
		fmt.Scan(&number)

		if number >= 0 {
			counter++
		}
	}

	fmt.Print(counter)
}
